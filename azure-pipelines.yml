trigger:
  - master

schedules:
  - cron: "10 * * * *"
    displayName: Every Hour Regression Test
    always: true
    branches:
      include:
        - master

# Microsoft Hosted Ubuntu image
# pool: 
#   vmImage: 'ubuntu-latest'

# Self Hosted Azure ScaleSet
pool: 'Cycle2xPipelines'

variables: # Define environment variables here
  PW_DB2: $(PW-DB2)
  PW_MOCA: $(PW-MOCA)
  PW_MYSQL: $(PW-MYSQL)
  PW_OPENSSH: $(PW-OPENSSH)
  PW_ORACLE_DB: $(PW-ORACLE-DB)
  PW_SQL_DB: $(PW-SQL-DB)
  PW_SQL14_DB: $(PW-SQL14-DB)
  PW_TELNET: $(PW-TELNET)
  PW_AZURESQL: $(PW-AZURESQL)
  MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)
  DOCKERIZED_CYCLE_CLIENT_ID: $(DOCKERIZED-CYCLE-CLIENT-ID)
  DOCKERIZED_CYCLE_CLIENT_SECRET: $(DOCKERIZED-CYCLE-CLIENT-SECRET)


stages:
  - stage: PrepareDocker
    jobs:
      - job: PrepareDocker
        displayName: Prepare Docker
        steps:
          - task: AzureKeyVault@2
            inputs:
              #azureSubscription: 'Cycle SaaS - Dev - Managed Identity'
              azureSubscription: "Cycle SaaS - Dev(bf75aa33-e54f-419f-b36d-69a6f1a9d84b)"
              KeyVaultName: "kv-development-5itM"
              SecretsFilter: "PW-CYCLEDEV-ACR, PW-DB2, PW-MOCA, PW-MYSQL, PW-ORACLE-DB, PW-SQL-DB, PW-SQL14-DB, PW-TELNET, PW-OPENSSH, PW-AZURESQL, dockerized-cycle-client-id, dockerized-cycle-client-secret, GOOGLE-MAPS-API-KEY"
              RunAsPreJob: true

          - script: |
              docker login cycledev.azurecr.io -u cycledev -p $(PW-CYCLEDEV-ACR)
            failOnStderr: false
            displayName: "Pipeline Info"
            env:
              PW-CYCLEDEV-ACR: $(PW-CYCLEDEV-ACR)
          
          - script: |
              docker compose -f connection-test-docker-compose.yml up --attach cycle-connection-test --abort-on-container-exit
              docker compose -f connection-test-docker-compose.yml down
            failOnStderr: true
            displayName: "Run Cycle Connection Test feature."
            env:
                PW_DB2: $(PW-DB2)
                PW_MOCA: $(PW-MOCA)
                PW_MYSQL: $(PW-MYSQL)
                PW_OPENSSH: $(PW-OPENSSH)
                PW_ORACLE_DB: $(PW-ORACLE-DB)
                PW_SQL_DB: $(PW-SQL-DB)
                PW_SQL14_DB: $(PW-SQL14-DB)
                PW_TELNET: $(PW-TELNET)
                PW_AZURESQL: $(PW-AZURESQL)
                MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)
                DOCKERIZED_CYCLE_CLIENT_ID: $(DOCKERIZED-CYCLE-CLIENT-ID)
                DOCKERIZED_CYCLE_CLIENT_SECRET: $(DOCKERIZED-CYCLE-CLIENT-SECRET)

          - script: |
              docker compose -f api-test-docker-compose.yml up --attach cycle-api-test --abort-on-container-exit
              docker compose -f api-test-docker-compose.yml down
            failOnStderr: true
            displayName: "Run Cycle API Test feature."
            env:
                PW_DB2: $(PW-DB2)
                PW_MOCA: $(PW-MOCA)
                PW_MYSQL: $(PW-MYSQL)
                PW_OPENSSH: $(PW-OPENSSH)
                PW_ORACLE_DB: $(PW-ORACLE-DB)
                PW_SQL_DB: $(PW-SQL-DB)
                PW_SQL14_DB: $(PW-SQL14-DB)
                PW_TELNET: $(PW-TELNET)
                PW_AZURESQL: $(PW-AZURESQL)
                MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)
                DOCKERIZED_CYCLE_CLIENT_ID: $(DOCKERIZED-CYCLE-CLIENT-ID)
                DOCKERIZED_CYCLE_CLIENT_SECRET: $(DOCKERIZED-CYCLE-CLIENT-SECRET)

          - script: |
              docker compose -f chrome-test-docker-compose.yml up --attach cycle-browser-test-chrome --abort-on-container-exit
              docker compose -f chrome-test-docker-compose.yml down
            failOnStderr: true
            displayName: "Run Cycle browser test (Chrome) feature."
            env:
                PW_DB2: $(PW-DB2)
                PW_MOCA: $(PW-MOCA)
                PW_MYSQL: $(PW-MYSQL)
                PW_OPENSSH: $(PW-OPENSSH)
                PW_ORACLE_DB: $(PW-ORACLE-DB)
                PW_SQL_DB: $(PW-SQL-DB)
                PW_SQL14_DB: $(PW-SQL14-DB)
                PW_TELNET: $(PW-TELNET)
                PW_AZURESQL: $(PW-AZURESQL)
                MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)
                DOCKERIZED_CYCLE_CLIENT_ID: $(DOCKERIZED-CYCLE-CLIENT-ID)
                DOCKERIZED_CYCLE_CLIENT_SECRET: $(DOCKERIZED-CYCLE-CLIENT-SECRET)

          - script: |
              docker compose -f edge-test-docker-compose.yml up --attach cycle-browser-test-edge --abort-on-container-exit
              docker compose -f edge-test-docker-compose.yml down
            failOnStderr: true
            displayName: "Run Cycle browser test (Edge) feature."
            env:
                PW_DB2: $(PW-DB2)
                PW_MOCA: $(PW-MOCA)
                PW_MYSQL: $(PW-MYSQL)
                PW_OPENSSH: $(PW-OPENSSH)
                PW_ORACLE_DB: $(PW-ORACLE-DB)
                PW_SQL_DB: $(PW-SQL-DB)
                PW_SQL14_DB: $(PW-SQL14-DB)
                PW_TELNET: $(PW-TELNET)
                PW_AZURESQL: $(PW-AZURESQL)
                MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)
                DOCKERIZED_CYCLE_CLIENT_ID: $(DOCKERIZED-CYCLE-CLIENT-ID)
                DOCKERIZED_CYCLE_CLIENT_SECRET: $(DOCKERIZED-CYCLE-CLIENT-SECRET)

          # - script: |
          #     docker compose build --build-arg pw_oracle_db='$PW_ORACLE_DB' --build-arg pw_sql_db='$PW_SQL_DB' --build-arg pw_sql14_db='$PW_SQL14_DB' --build-arg pw_db2='$PW_DB2' --build-arg pw_mysql='$PW_MYSQL' --build-arg pw_telnet='$PW_TELNET' --build-arg pw_openssh='$PW_OPENSSH' --build-arg pw_moca='$PW_MOCA' --build-arg pw_azuresql='$PW_AZURESQL' --build-arg maps_api_key='$MAPS_API_KEY' --build-arg auth_token='$AUTH_TOKEN'
          #     sleep 5
          #     docker compose up -d --remove-orphans
          #     sleep 5
          #     docker ps -a
          #   failOnStderr: false
          #   displayName: "Build Docker environment"
          #   env:
          #     PW_DB2: $(PW-DB2)
          #     PW_MOCA: $(PW-MOCA)
          #     PW_MYSQL: $(PW-MYSQL)
          #     PW_OPENSSH: $(PW-OPENSSH)
          #     PW_ORACLE_DB: $(PW-ORACLE-DB)
          #     PW_SQL_DB: $(PW-SQL-DB)
          #     PW_SQL14_DB: $(PW-SQL14-DB)
          #     PW_TELNET: $(PW-TELNET)
          #     PW_AZURESQL: $(PW-AZURESQL)
          #     MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)
          #     AUTH_TOKEN: $(CYCLE-AUTH-TOKEN-072623)

          # - script: |
          #     docker compose logs -f cycle-connection-test
          #   failOnStderr: false
          #   displayName: "Logs for Cycle Connection Test"
          #   env:
          #     PW_DB2: $(PW-DB2)
          #     PW_MOCA: $(PW-MOCA)
          #     PW_MYSQL: $(PW-MYSQL)
          #     PW_OPENSSH: $(PW-OPENSSH)
          #     PW_ORACLE_DB: $(PW-ORACLE-DB)
          #     PW_SQL_DB: $(PW-SQL-DB)
          #     PW_SQL14_DB: $(PW-SQL14-DB)
          #     PW_TELNET: $(PW-TELNET)
          #     PW_AZURESQL: $(PW-AZURESQL)
          #     AUTH_TOKEN: $(CYCLE-AUTH-TOKEN-072623)

          # - script: |
          #     docker compose logs -f cycle-api-test 
          #   failOnStderr: false
          #   displayName: "Logs for Cycle API Test"
          #   env:
          #     AUTH_TOKEN: $(CYCLE-AUTH-TOKEN-072623)
          #     MAPS_API_KEY: $(GOOGLE-MAPS-API-KEY)

          
          # - script: |
          #     docker compose logs -f cycle-browser-test-chrome
          #   failOnStderr: false
          #   displayName: "Logs for Cycle Browser Test - Chrome"
          #   env:
          #     AUTH_TOKEN: $(CYCLE-AUTH-TOKEN-072623)
            
          # - script: |
          #     docker compose logs -f cycle-browser-test-edge
          #   failOnStderr: false
          #   displayName: "Logs for Cycle Browser Test - Edge"
          #   env:
          #     AUTH_TOKEN: $(CYCLE-AUTH-TOKEN-072623)

          - script: |
              docker container prune -f
            failOnStderr: false
            displayName: "Tear down docker infrastructure"
            condition: always() # this step will always run, even if the pipeline is canceled. Cleanup needs to take place, otherwise these docker containers will get stuck running and other errors will creep up. RB