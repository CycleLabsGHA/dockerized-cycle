name: Run Dockerized Cycle Tests

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:

jobs:
  cycle-tests:
    name: Run Cycle Tests
    runs-on: ubuntu-latest

    steps:
      - name: 🛎️ Checkout Code
        uses: actions/checkout@v3

      - name: 🔐 Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      # - name: ⚙️ Install PowerShell
      #   run: |
      #     sudo apt-get update
      #     sudo apt-get install -y powershell
      #   shell: bash
      
      # - name: 🧪 Retrieve Secrets and Export to secrets.env
      #   shell: pwsh
      #   run: |
      #     $ErrorActionPreference = "Stop"
      
      #     $secretNames = @(
      #       'PW-AZURESQL', 'PW-DB2', 'PW-MOCA', 'PW-MYSQL',
      #       'PW-OPENSSH', 'PW-ORACLE-DB', 'PW-SQL-DB',
      #       'PW-SQL14-DB', 'PW-TELNET', 'GOOGLE-MAPS-API-KEY', 'UN-AZURESQL'
      #     )
      
      #     $envFile = "$env:GITHUB_WORKSPACE/secrets.env"
      #     Remove-Item -Path $envFile -ErrorAction Ignore
      #     New-Item -Path $envFile -ItemType File -Force | Out-Null
      
      #     foreach ($secretName in $secretNames) {
      #         $safeName = $secretName -replace '-', '_'
      #         $secretValue = az keyvault secret show --vault-name "${{ secrets.DEV_KV_NAME }}" --name $secretName --query 'value' -o tsv
      
      #         if (-not [string]::IsNullOrWhiteSpace($secretValue)) {
      #             Write-Output "::add-mask::$secretValue"
      #             "$safeName=$secretValue" | Out-File -FilePath $envFile -Append -Encoding utf8
      #             Write-Host "✅ Set $safeName in secrets.env"
      #         } else {
      #             Write-Host "⚠️ Warning: $secretName returned an empty or null value and will not be written to secrets.env"
      #         }
      #     }
      
      #     # Validate and write CI_CYCLE_AUTH and CI_CYCLE_AUTH_SECRET
      #     $ciAuth = "${{ secrets.CI_CYCLE_AUTH }}"
      #     $ciSecret = "${{ secrets.CI_CYCLE_AUTH_SECRET }}"
      
      #     if (-not [string]::IsNullOrWhiteSpace($ciAuth)) {
      #         Write-Output "::add-mask::$ciAuth"
      #         "CI_CYCLE_AUTH=$ciAuth" | Out-File -FilePath $envFile -Append -Encoding utf8
      #         Write-Host "✅ Set CI_CYCLE_AUTH in secrets.env"
      #     } else {
      #         Write-Host "⚠️ Warning: CI_CYCLE_AUTH is empty"
      #     }
      
      #     if (-not [string]::IsNullOrWhiteSpace($ciSecret)) {
      #         Write-Output "::add-mask::$ciSecret"
      #         "CI_CYCLE_AUTH_SECRET=$ciSecret" | Out-File -FilePath $envFile -Append -Encoding utf8
      #         Write-Host "✅ Set CI_CYCLE_AUTH_SECRET in secrets.env"
      #     } else {
      #         Write-Host "⚠️ Warning: CI_CYCLE_AUTH_SECRET is empty"
      #     }

      - name: 🔐 Retrieve Key Vault secrets
        run: |
            secret_names=(
            "PW-AZURESQL"
            "PW-DB2"
            "PW-MOCA"
            "PW-MYSQL"
            "PW-OPENSSH"
            "PW-ORACLE-DB"
            "PW-SQL-DB"
            "PW-SQL14-DB"
            "PW-TELNET"
            "UN-AZURESQL"
            "GOOGLE-MAPS-API-KEY"
            )
    
            env_file="$GITHUB_WORKSPACE/secrets.env"
            : > "$env_file"
    
            for secret_name in "${secret_names[@]}"; do
              safe_name="${secret_name//-/_}"
              value=$(az keyvault secret show --vault-name "${{ secrets.DEV_KV_NAME }}" --name "$secret_name" --query "value" -o tsv 2> /dev/null)
    
              if [[ -n "$value" ]]; then
                echo "$safe_name=$value" >> "$env_file"
                echo "Retrieved secret for $safe_name"
              else
                echo "⚠️ Warning: Failed to retrieve secret for $safe_name" >&2
              fi
            done

      - name: 🧪 Run Cycle API Test
        run: |
          ls -la
          echo "--- secrets.env ---"
          cat secrets.env || echo "❌ secrets.env not found"
          docker compose -f api-test-docker-compose.yml pull --quiet
          docker compose -f api-test-docker-compose.yml up --attach cycle-api-test --abort-on-container-exit || true
          docker compose -f api-test-docker-compose.yml down
        shell: bash

      - name: 🧪 Run Cycle Browser Test - Chrome
        run: |
          docker compose -f chrome-test-docker-compose.yml pull --quiet
          docker compose -f chrome-test-docker-compose.yml up --attach cycle-browser-test-chrome --abort-on-container-exit || true
          docker compose -f chrome-test-docker-compose.yml down
        shell: bash

      - name: 🧪 Run Cycle Browser Test - Edge
        run: |
          docker compose -f edge-test-docker-compose.yml pull --quiet
          docker compose -f edge-test-docker-compose.yml up --attach cycle-browser-test-edge --abort-on-container-exit || true
          docker compose -f edge-test-docker-compose.yml down
        shell: bash

      - name: 🧹 Clean up Docker Containers
        run: docker container prune -f
