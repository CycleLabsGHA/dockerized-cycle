name: Run Dockerized Cycle Tests

on:
  schedule:
    - cron: '0 */4 * * *'  # Every 4 hours
  workflow_dispatch:

jobs:
  cycle-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Log in to Azure
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install PowerShell (if not present)
        run: |
          sudo apt-get update
          sudo apt-get install -y powershell
        shell: bash

      - name: Retrieve Secrets and Export to GITHUB_ENV
        shell: pwsh
        run: |
          $secretNames = @(
            'PW-AZURESQL', 'PW-DB2', 'PW-MOCA', 'PW-MYSQL', 'PW-OPENSSH',
            'PW-ORACLE-DB', 'PW-SQL-DB', 'PW-SQL14-DB', 'PW-TELNET', 'GOOGLE-MAPS-API-KEY', 'UN-AZURESQL'
          )

          foreach ($secretName in $secretNames) {
            $safeName = $secretName -replace '-', '_'
            $secretValue = az keyvault secret show --vault-name "${{ secrets.DEV_KV_NAME }}" --name $secretName --query 'value' -o tsv
            Write-Output "::add-mask::$secretValue"
            "$safeName=$secretValue" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
            Write-Host "✅ Set $safeName in GITHUB_ENV"
          }

          # Add CI secrets from GitHub directly
          Write-Output "::add-mask::${{ secrets.CI_CYCLE_AUTH }}"
          Write-Output "::add-mask::${{ secrets.CI_CYCLE_AUTH_SECRET }}"
          "CI_CYCLE_AUTH=${{ secrets.CI_CYCLE_AUTH }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          "CI_CYCLE_AUTH_SECRET=${{ secrets.CI_CYCLE_AUTH_SECRET }}" | Out-File -FilePath $env:GITHUB_ENV -Append -Encoding utf8
          Write-Host "✅ Set CI_CYCLE_AUTH and CI_CYCLE_AUTH_SECRET in GITHUB_ENV"
      
      - name: Pre-pull images (quietly)
        run: |
          docker compose -f api-test-docker-compose.yml pull > /dev/null 2>&1
          docker compose -f chrome-test-docker-compose.yml pull > /dev/null 2>&1
          docker compose -f edge-test-docker-compose.yml pull > /dev/null 2>&1

      - name: Run Cycle API Test
        run: |
          docker compose -f api-test-docker-compose.yml up --attach cycle-api-test --abort-on-container-exit || true
          docker compose -f api-test-docker-compose.yml down
        shell: bash

      - name: Run Cycle Browser Test - Chrome
        run: |
          docker compose -f chrome-test-docker-compose.yml up --attach cycle-browser-test-chrome --abort-on-container-exit || true
          docker compose -f chrome-test-docker-compose.yml down
        shell: bash

      - name: Run Cycle Browser Test - Edge
        run: |
          docker compose -f edge-test-docker-compose.yml up --attach cycle-browser-test-edge --abort-on-container-exit || true
          docker compose -f edge-test-docker-compose.yml down
        shell: bash

      # Need to use an Azure Container instance on our VNet to get this test to work due to private endpoints  
      # - name: Run Cycle Connection Test
      #   run: |
      #     docker compose -f connection-test-docker-compose.yml up --attach cycle-connection-test --abort-on-container-exit || true
      #     docker compose -f connection-test-docker-compose.yml down
      #   shell: bash

      - name: Clean up Docker Containers
        run: docker container prune -f
